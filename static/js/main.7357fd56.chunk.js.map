{"version":3,"sources":["App.tsx","index.tsx"],"names":["operations","generateEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","className","href","target","rel","onClick","Math","random","style","display","gridTemplateColumns","map","col","k","newGrid","width","height","backgroundColor","undefined","border","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAQMA,G,MAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,KAGDC,EAAoB,WAExB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAhBF,GAgBeA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAhBT,KAgByB,kBAAM,MAG7C,OAAOH,GA8GMK,EA3GO,WAAO,IAAD,EACFC,oBAAS,WAC/B,OAAOP,OAFiB,mBACnBQ,EADmB,KACbC,EADa,OAKIF,oBAAkB,GALtB,mBAKnBG,EALmB,KAKVC,EALU,KAOpBC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAGhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD+B,IAAD,WACrBjB,GACP,IAF4B,eAEnBkB,GACP,IAAIC,EAAY,EAChBtB,EAAWuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOvB,EAAIqB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EA7Cf,IA6CiCC,GAAQ,GAAKA,EA5C9C,KA6CAL,GAAaJ,EAAEQ,GAAMC,OAIrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASjB,GAAGkB,GAAK,EACI,IAAZH,EAAEf,GAAGkB,IAA0B,IAAdC,IAC1BF,EAASjB,GAAGkB,GAAK,IAbZA,EAAI,EAAGA,EAvCV,GAuCuBA,IAAM,EAA1BA,IADFlB,EAAI,EAAGA,EAvCR,GAuCqBA,IAAM,EAA1BA,SAqBbyB,WAAWZ,EAAe,QACzB,IAEH,OACE,sBAAKa,UAAU,eAAf,UACE,mBAAGC,KAAK,wDAAwDC,OAAO,SAASC,IAAI,aAApF,+CACA,wBACEC,QAAS,WACPrB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,MALN,SASGL,EAAU,OAAS,UAEtB,wBACEsB,QAAS,WACPvB,EAAQT,MAFZ,mBAOA,wBACEgC,QAAS,WAEP,IADA,IAAM/B,EAAO,GACJC,EAAI,EAAGA,EAvFV,GAuFuBA,IAC3BD,EAAKE,KACHC,MAAMC,KAAKD,MAxFT,KAwFyB,kBAAO6B,KAAKC,SAAW,GAAM,EAAI,MAIhEzB,EAAQR,IATZ,oBAeA,qBACEkC,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OArGb,GAqGa,YAHvB,SAMG7B,EAAK8B,KAAI,SAACrC,EAAMC,GAAP,OACRD,EAAKqC,KAAI,SAACC,EAAKC,GAAN,OACP,qBAEER,QAAS,WACP,IAAMS,EAAUvB,YAAQV,GAAM,SAACW,GAC7BA,EAASjB,GAAGsC,GAAKhC,EAAKN,GAAGsC,GAAK,EAAI,KAEpC/B,EAAQgC,IAEVN,MAAO,CACLO,MAAO,GACPC,OAAQ,GACRC,gBAAiBpC,EAAKN,GAAGsC,GAAK,eAAYK,EAC1CC,OAAQ,oBAZZ,UACU5C,EADV,YACesC,YAiBrB,2DC9HNO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7357fd56.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from \"react\";\nimport { produce } from \"immer\";\n\nimport \"./App.css\";\n\nconst numRows = 30;\nconst numCols = 30;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  const [running, setRunning] = useState<Boolean>(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                neighbors += g[newI][newJ];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = 0;\n            } else if (g[i][j] === 0 && neighbors === 3) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <div className=\"grid-wrapper\">\n      <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\" rel=\"noreferrer\">Learn about Conway's Game of Life</a>\n      <button\n        onClick={() => {\n          setRunning(!running);\n          if (!running) {\n            runningRef.current = true;\n            runSimulation();\n          }\n        }}\n      >\n        {running ? \"Stop\" : \"Start\"}\n      </button>\n      <button\n        onClick={() => {\n          setGrid(generateEmptyGrid());\n        }}\n      >\n        Clear\n      </button>\n      <button\n        onClick={() => {\n          const rows = [];\n          for (let i = 0; i < numRows; i++) {\n            rows.push(\n              Array.from(Array(numCols), () => (Math.random() > 0.5 ? 1 : 0))\n            );\n          }\n\n          setGrid(rows);\n        }}\n      >\n        Random\n      </button>\n      \n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][k] ? \"#33A7FF\" : undefined,\n                border: \"solid 1px black\",\n              }}\n            />\n          ))\n        )}\n      </div>\n      <h1>Conway's Game of Life</h1>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}